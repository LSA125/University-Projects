1. At no optimization, the variables are stored in the stack. At -O1 the variables are stored in registers

2. It uses the lea. It starts with rdi's value as an address, scales by a factor of rdi * 2 and shifts by 1.

3. -O1 is recursive while -O2 is iterative

4. Both functions seem to be using vector instructions however dot product is not using the ymm# registers

5. dot product began using the ymm# registers

6.
             dot_double_c took    13.3 ms
               dot_double took    22.1 ms
           dot_double_vec took    12.8 ms
            dot_double_vc took    14.4 ms

             dot_single_c took     6.2 ms
               dot_single took    19.2 ms
           dot_single_vec took     6.2 ms
            dot_single_vc took     7.4 ms

       map_poly_double_c1 took    26.7 ms
       map_poly_double_c2 took    26.3 ms
          map_poly_double took    32.2 ms
      map_poly_double_vec took    26.5 ms
       map_poly_double_vc took    25.3 ms

        map_poly_single_c took    13.4 ms
          map_poly_single took    20.4 ms
      map_poly_single_vec took    13.9 ms
       map_poly_single_vc took    13.1 ms

the c functions now took roughly the same amount of time.

